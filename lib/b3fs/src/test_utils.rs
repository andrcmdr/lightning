use crate::directory::entry::{BorrowedEntry, OwnedEntry, OwnedLink};
use crate::directory::hasher::DirectoryHasher;
use crate::directory::transcript::{hash_transcript, write_entry_transcript};

/// Returns the `i`-th ascii character starting from `A`.
pub fn name(mut i: usize) -> String {
    const CHARS: &str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    let mut bytes = Vec::new();
    while i > 0 {
        bytes.push(CHARS.as_bytes()[i % CHARS.len()]);
        i /= CHARS.len();
    }
    while bytes.len() < 5 {
        bytes.push(CHARS.as_bytes()[0]);
    }
    bytes.reverse();
    String::from_utf8(bytes).unwrap()
}

pub fn link(i: usize) -> OwnedLink {
    let mut s = [0; 32];
    s[0..8].copy_from_slice(&(i as u64).to_le_bytes());
    OwnedLink::File(s)
}

/// Returns a directory entry constructed from a name generated by [`name`] and a
/// link generated by [`link`]
pub fn entry(i: usize) -> OwnedEntry {
    OwnedEntry {
        name: name(i).bytes().collect(),
        link: link(i),
    }
}

/// Create a mock hash tree for a directory with `n` files.
pub fn dir_hash_tree(n: usize) -> Vec<[u8; 32]> {
    let mut hasher = DirectoryHasher::new(true);
    hasher.reserve(n);
    for i in 0..n {
        let e = entry(i);
        hasher.insert(BorrowedEntry::from(&e)).unwrap();
    }
    hasher.finalize().tree.unwrap()
}

/// Return the hash of the i-th mock directory entry.
pub fn hash_mock_dir_entry(i: usize, is_root: bool) -> [u8; 32] {
    let mut buffer = vec![];
    let e = entry(i);
    write_entry_transcript(&mut buffer, BorrowedEntry::from(&e), i as u16, is_root);
    hash_transcript(&buffer)
}
